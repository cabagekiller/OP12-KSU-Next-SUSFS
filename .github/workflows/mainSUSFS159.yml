name: Build and Release Kernel SUSFS 1.5.9 (Final Corrected Version)

on:
  workflow_dispatch:

env:
  DEBIAN_FRONTEND: noninteractive
  ROOT_DIR_PREFIX: "OP12-A15"
  BRANCH: "android14-6.1"
  SUSFS_VERSION: "v1.5.9"

jobs:
  build-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code and Update Submodule
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: 'recursive'
      - run: |
          git submodule update --remote --merge

      - name: Setup Build Environment and Dependencies
        run: |
          set -euxo pipefail
          # Free up disk space and install dependencies
          sudo apt-get update -qq && sudo apt-get install -y -qq curl
          curl -fsSL https://raw.githubusercontent.com/kou/arrow/e49d8ae15583ceff03237571569099a6ad62be32/ci/scripts/util_free_space.sh | bash
          sudo apt-get install -y --no-install-recommends \
            python3-pip curl git zip unzip gcc g++ make ninja-build file bc bison flex libssl-dev libelf-dev wget \
            build-essential python3-dev python3-setuptools rsync ccache
          
          # Install latest Pahole
          sudo apt-get remove --purge -y dwarves
          git clone --recurse-submodules https://git.kernel.org/pub/scm/devel/pahole/pahole.git
          cd pahole && cmake . && sudo make install && cd ..
          
          # Setup Python and repo tool
          python3 -m pip install --upgrade pip gitpython xmltodict
          mkdir -p "$HOME/bin"
          wget -O "$HOME/bin/repo" https://storage.googleapis.com/git-repo-downloads/repo
          chmod a+x "$HOME/bin/repo"
          echo "$HOME/bin" >> $GITHUB_PATH
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"

      - name: Cache Build Tools
        uses: actions/cache@v4
        with:
          path: |
            ~/.ccache
            ~/.cache/bazel
          key: ${{ runner.os }}-build-cache-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-build-cache-

      - name: Configure Build Directories and KSU Version
        id: build_dirs
        run: |
          set -euxo pipefail
          BUILD_DIR="${GITHUB_WORKSPACE}/builds"
          KERNEL_SRC_DIR="${BUILD_DIR}/kernel_platform/oneplus12_v"
          echo "BUILD_DIR=${BUILD_DIR}" >> $GITHUB_ENV
          echo "KERNEL_SRC_DIR=${KERNEL_SRC_DIR}" >> $GITHUB_ENV
          mkdir -p "${BUILD_DIR}"
          # Calculate KSU Version from the original submodule checkout
          cd "${GITHUB_WORKSPACE}/kernel_platform/KernelSU-Next/kernel"
          KSU_VERSION=$(expr $(git rev-list --count HEAD) + 10200)
          echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV

      - name: Clone External Repositories
        working-directory: ${{ env.BUILD_DIR }}
        run: |
          set -euxo pipefail
          git clone --recursive https://github.com/WildKernels/AnyKernel3.git -b gki-2.0
          git clone https://gitlab.com/simonpunk/susfs4ksu.git -b gki-android14-6.1
          git clone https://github.com/cabagekiller/kernel_patches.git

      - name: Setup Kernel Source
        working-directory: ${{ env.BUILD_DIR }}
        run: |
          set -euxo pipefail
          mkdir -p kernel_platform/oneplus12_v
          cd kernel_platform/oneplus12_v
          repo init -u https://github.com/OnePlusOSS/kernel_manifest.git -b oneplus/sm8650 -m oneplus12_v.xml --depth=1
          repo sync -c -j"$(nproc)" --force-sync --no-clone-bundle --no-tags || { echo "Repo sync failed."; exit 1; }
          rm -rf ./kernel_platform/common/android/abi_gki_protected_exports_*

      - name: Integrate KernelSU Submodule
        run: |
          set -euxo pipefail
          cp -r "${GITHUB_WORKSPACE}/kernel_platform/KernelSU-Next" "${{ env.KERNEL_SRC_DIR }}/kernel_platform/"

      - name: Apply KernelSU Version to Makefile
        working-directory: ${{ env.KERNEL_SRC_DIR }}/kernel_platform/KernelSU-Next/kernel
        run: |
          set -euxo pipefail
          sed -i "s/DKSU_VERSION=[0-9]*/DKSU_VERSION=${KSUVER}/" Makefile
          
      - name: Setup SUSFS and Apply Patches
        working-directory: ${{ env.KERNEL_SRC_DIR }}/kernel_platform
        run: |
          set -euxo pipefail
          SUSFS_REPO_DIR="${{ env.BUILD_DIR }}/susfs4ksu"
          PATCHES_REPO_DIR="${{ env.BUILD_DIR }}/kernel_patches"
          KSU_SUBMODULE_DIR="KernelSU-Next"

          # Copy SUSFS source files
          echo "Copying SUSFS source files..."
          mkdir -p ./common/fs ./common/include/linux
          cp "${SUSFS_REPO_DIR}/kernel_patches/fs/"* ./common/fs/
          cp "${SUSFS_REPO_DIR}/kernel_patches/include/linux/"* ./common/include/linux/

          # Apply patches to KernelSU-Next Submodule
          echo "Patching KernelSU-Next submodule..."
          cd "${KSU_SUBMODULE_DIR}"
          cp "${SUSFS_REPO_DIR}/kernel_patches/KernelSU/10_enable_susfs_for_ksu.patch" ./
          patch -p1 --forward -F 3 < 10_enable_susfs_for_ksu.patch || true

          # Find rejected hunks and apply corresponding fix patches
          for rej_file in $(find ./kernel -maxdepth 2 -name "*.rej"); do
            original_file=$(basename "$rej_file" .rej)
            fix_patch_path="${PATCHES_REPO_DIR}/next/susfs_fix_patches/${SUSFS_VERSION}/fix_${original_file}.patch"
            
            if [ -f "$fix_patch_path" ]; then
              echo "Applying fix for ${original_file}..."
              patch -p1 --forward < "$fix_patch_path" || true
            else
              echo "Warning: No fix patch found for ${original_file} at ${fix_patch_path}"
            fi
          done
          
          patch -p1 --forward < "${PATCHES_REPO_DIR}/next/susfs_fix_patches/${SUSFS_VERSION}/fix_kernel_compat.c.patch" || true
          cd ..

          # Apply patches to common kernel source
          echo "Patching common kernel source..."
          patch -p1 -d common < "${SUSFS_REPO_DIR}/kernel_patches/50_add_susfs_in_gki-android14-6.1.patch" || true
          patch -p1 -d common -F 3 < "${PATCHES_REPO_DIR}/69_hide_stuff.patch" || true
          patch -p1 -d common -F 3 < "${PATCHES_REPO_DIR}/next/scope_min_manual_hooks_v1.4.patch" || true

      - name: Configure Kernel
        working-directory: ${{ env.KERNEL_SRC_DIR }}/kernel_platform
        run: |
          set -euxo pipefail
          # Apply kernel configurations
          cat >> ./common/arch/arm64/configs/gki_defconfig <<EOF
          CONFIG_KSU=y
          CONFIG_KSU_SUSFS=y
          CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y
          CONFIG_KSU_SUSFS_SUS_PATH=y
          CONFIG_KSU_SUSFS_SUS_MOUNT=y
          CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y
          CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y
          CONFIG_KSU_SUSFS_SUS_KSTAT=y
          CONFIG_KSU_SUSFS_SUS_OVERLAYFS=y
          CONFIG_KSU_SUSFS_TRY_UMOUNT=y
          CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y
          CONFIG_KSU_SUSFS_SPOOF_UNAME=y
          CONFIG_KSU_SUSFS_ENABLE_LOG=y
          CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y
          CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y
          CONFIG_KSU_SUSFS_OPEN_REDIRECT=y
          CONFIG_KSU_SUSFS_SUS_SU=n
          CONFIG_KSU_WITH_KPROBES=n
          CONFIG_KSU_KPROBES_HOOK=n
          CONFIG_COMPAT=y
          CONFIG_TMPFS_XATTR=y
          CONFIG_TMPFS_POSIX_ACL=y
          CONFIG_IP_NF_TARGET_TTL=y
          CONFIG_IP6_NF_TARGET_HL=y
          CONFIG_IP6_NF_MATCH_HL=y
          CONFIG_THREAD_INFO_IN_TASK=y
          CONFIG_TCP_CONG_ADVANCED=y
          CONFIG_TCP_CONG_BBR=y
          CONFIG_TCP_CONG_BIC=n
          CONFIG_TCP_CONG_WESTWOOD=n
          CONFIG_TCP_CONG_HTCP=n
          CONFIG_NET_SCH_FQ=y
          CONFIG_NET_SCH_FQ_CODEL=y
          EOF

          # Remove defconfig check and apply branding
          sed -i 's/check_defconfig//' ./common/build.config.gki
          sed -i '$s|echo "\$res"|echo "\$res-Cabage"|' ./common/scripts/setlocalversion
          sed -i 's/-dirty//' ./common/scripts/setlocalversion
          sed -i '/echo "LTO $LTO "/i export LTO=thin' ./oplus/build/oplus_setup.sh
          sed -i 's/export REPACK_IMG=true/export REPACK_IMG=false/g' ./oplus/build/oplus_setup.sh

      - name: Build Kernel
        working-directory: ${{ env.KERNEL_SRC_DIR }}/kernel_platform
        run: |
          set -euxo pipefail
          mkdir -p out
          export PATH="/usr/lib/ccache:$PATH"
          ccache -z
          
          ./build_with_bazel.py \
            -t pineapple gki \
            --jobs="$(nproc --all)" --verbose_failures --config=stamp \
            --user_kmi_symbol_lists=//msm-kernel:android/abi_gki_aarch64_qcom \
            --ignore_missing_projects -o "$(pwd)/out"
            
          ccache -s

      - name: Package Kernel Zip
        working-directory: ${{ env.BUILD_DIR }}
        run: |
          set -euxo pipefail
          cp "${{ env.KERNEL_SRC_DIR }}/kernel_platform/out/dist/Image" AnyKernel3/
          cd AnyKernel3
          ZIP_NAME="Cabage-OP12-SUSFS-$(date +'%Y-%m-%d-%H-%M-%S').zip"
          echo "ZIP_NAME=${ZIP_NAME}" >> $GITHUB_ENV
          zip -r "../${ZIP_NAME}" ./*

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ env.BUILD_DIR }}/${{ env.ZIP_NAME }}
          tag_name: ${{ github.run_id }}-${{ github.run_number }}
          name: "KernelSU-Next CI Build"
          body: |
            **Device:** ${{ env.ROOT_DIR_PREFIX }}
            **Branch:** ${{ env.BRANCH }}
            **KernelSU Version:** ${{ env.KSUVER }}
            
            Automated build from GitHub Actions.

      - name: Upload Build Logs on Failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs
          path: |
            ${{ env.KERNEL_SRC_DIR }}/kernel_platform/out/*.log
            ${{ env.KERNEL_SRC_DIR }}/kernel_platform/**/*.rej
          retention-days: 7
