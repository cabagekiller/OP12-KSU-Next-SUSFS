name: Build and Release Kernel SUSFS 1.5.9 (Optimized)

on:
  workflow_dispatch:

env:
  DEBIAN_FRONTEND: noninteractive
  ROOT_DIR_PREFIX: "OP12-A15"
  BRANCH: "android14-6.1"
  SUSFS_VERSION: "v1.5.9"

defaults:
  run:
    shell: bash -euxo pipefail

jobs:
  build-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code with Submodules
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for git describe to work
          submodules: 'recursive'

      - name: Free Up Disk Space and Install Dependencies
        run: |
          # Free up disk space, this script also runs apt-get update
          curl -fsSL https://raw.githubusercontent.com/kou/arrow/e49d8ae15583ceff03237571569099a6ad62be32/ci/scripts/util_free_space.sh | bash
          
          # Remove conflicting packages and install all build dependencies in one go
          sudo apt-get remove --purge -y dwarves
          sudo apt-get install -y --no-install-recommends \
            python3-pip curl git zip unzip gcc g++ make ninja-build file bc bison flex libssl-dev libelf-dev wget \
            build-essential python3-dev python3-setuptools rsync ccache \
            libdw-dev zlib1g-dev

          # Install latest Pahole from source, as pre-packaged versions are often too old for modern kernels
          git clone --recurse-submodules https://git.kernel.org/pub/scm/devel/pahole/pahole.git
          cd pahole
          cmake .
          sudo make install
          cd ..
          
          # Setup Python and Google's "repo" tool
          python3 -m pip install --upgrade pip
          pip3 install gitpython xmltodict
          mkdir -p "$HOME/bin"
          wget -O "$HOME/bin/repo" https://storage.googleapis.com/git-repo-downloads/repo
          chmod a+x "$HOME/bin/repo"
          echo "$HOME/bin" >> $GITHUB_PATH
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"

      - name: Cache ccache and Bazel
        uses: actions/cache@v4
        with:
          path: |
            ~/.ccache
            ~/.cache/bazel
          # The key is based on the workflow file itself. If the build process changes, the cache is invalidated.
          key: ${{ runner.os }}-build-cache-${{ hashFiles('.github/workflows/mainSUSFS159.yml') }}
          restore-keys: |
            ${{ runner.os }}-build-cache-

      - name: Configure Build Directories
        run: |
          BUILD_DIR="${GITHUB_WORKSPACE}/builds"
          KERNEL_SRC_DIR="${BUILD_DIR}/kernel_platform/oneplus12_v"
          echo "BUILD_DIR=${BUILD_DIR}" >> $GITHUB_ENV
          echo "KERNEL_SRC_DIR=${KERNEL_SRC_DIR}" >> $GITHUB_ENV
          mkdir -p "${KERNEL_SRC_DIR}"

      - name: Clone External Repositories
        working-directory: ${{ env.BUILD_DIR }}
        run: |
          git clone --recursive https://github.com/WildKernels/AnyKernel3.git -b gki-2.0
          git clone https://gitlab.com/simonpunk/susfs4ksu.git -b gki-android14-6.1
          git clone https://github.com/cabagekiller/kernel_patches.git

      - name: Setup Kernel Source
        working-directory: ${{ env.KERNEL_SRC_DIR }}
        run: |
          repo init -u https://github.com/OnePlusOSS/kernel_manifest.git -b oneplus/sm8650 -m oneplus12_v.xml --depth=1
          repo sync -c -j"$(nproc)" --force-sync --no-clone-bundle --no-tags
          rm -rf ./kernel_platform/common/android/abi_gki_protected_exports_*

      - name: Integrate KernelSU Submodule
        run: |
          # This build uses a specific "KernelSU-Next" submodule included in the repo
          cp -r "${GITHUB_WORKSPACE}/kernel_platform/KernelSU-Next" "${KERNEL_SRC_DIR}/kernel_platform/"

      - name: Setup KernelSU Version
        working-directory: ${{ env.KERNEL_SRC_DIR }}/kernel_platform/KernelSU-Next/kernel
        run: |
          # Manually calculate and set the KernelSU version based on commit count
          KSU_VERSION=$(expr $(git rev-list --count HEAD) + 10200)
          echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
          sed -i "s/DKSU_VERSION=11998/DKSU_VERSION=${KSU_VERSION}/" Makefile

      - name: Setup SUSFS and Apply Patches
        working-directory: ${{ env.KERNEL_SRC_DIR }}/kernel_platform
        run: |
          SUSFS_REPO_DIR="../../susfs4ksu"
          PATCHES_REPO_DIR="../../kernel_patches"
          KSU_SUBMODULE_DIR="KernelSU-Next"

          # Copy SUSFS source files
          echo "Copying SUSFS source files..."
          mkdir -p ./common/fs ./common/include/linux
          cp "${SUSFS_REPO_DIR}/kernel_patches/fs/"* ./common/fs/
          cp "${SUSFS_REPO_DIR}/kernel_patches/include/linux/"* ./common/include/linux/

          # Patch KernelSU. This patch is expected to fail sometimes, and is handled by fix-up patches.
          echo "Patching KernelSU submodule..."
          if ! patch -p1 -d "${KSU_SUBMODULE_DIR}" --forward -F 3 < "${SUSFS_REPO_DIR}/kernel_patches/KernelSU/10_enable_susfs_for_ksu.patch"; then
            echo "Main SUSFS patch failed on KernelSU, attempting to apply fix patches..."
            # Find rejected hunks and apply corresponding fix patches
            for rej_file in $(find "${KSU_SUBMODULE_DIR}/kernel" -maxdepth 2 -name "*.rej"); do
              original_file=$(basename "$rej_file" .rej)
              fix_patch_path="${PATCHES_REPO_DIR}/next/susfs_fix_patches/${SUSFS_VERSION}/fix_${original_file}.patch"
              if [ -f "$fix_patch_path" ]; then
                echo "Applying fix for ${original_file}..."
                patch -p1 -d "${KSU_SUBMODULE_DIR}" --forward < "$fix_patch_path"
              else
                echo "Warning: No fix patch found for ${original_file} at ${fix_patch_path}"
              fi
            done
          else
            echo "Main SUSFS patch applied cleanly to KernelSU."
          fi
          
          patch -p1 -d "${KSU_SUBMODULE_DIR}" --forward < "${PATCHES_REPO_DIR}/next/susfs_fix_patches/${SUSFS_VERSION}/fix_kernel_compat.c.patch"

          # Apply patches to common kernel source. These must apply cleanly.
          echo "Patching common kernel source..."
          patch -p1 -d common < "${SUSFS_REPO_DIR}/kernel_patches/50_add_susfs_in_gki-android14-6.1.patch"
          patch -p1 -d common -F 3 < "${PATCHES_REPO_DIR}/69_hide_stuff.patch"
          patch -p1 -d common -F 3 < "${PATCHES_REPO_DIR}/next/scope_min_manual_hooks_v1.4.patch"

      - name: Configure Kernel
        working-directory: ${{ env.KERNEL_SRC_DIR }}/kernel_platform
        run: |
          # Append custom kernel configurations to the GKI defconfig
          cat >> ./common/arch/arm64/configs/gki_defconfig <<EOF
          CONFIG_KSU=y
          CONFIG_KSU_SUSFS=y
          CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y
          CONFIG_KSU_SUSFS_SUS_PATH=y
          CONFIG_KSU_SUSFS_SUS_MOUNT=y
          CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y
          CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y
          CONFIG_KSU_SUSFS_SPOOF_UNAME=y
          CONFIG_KSU_SUSFS_ENABLE_LOG=y
          CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y
          CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y
          CONFIG_KSU_SUSFS_OPEN_REDIRECT=y
          CONFIG_KSU_SUSFS_SUS_SU=n
          CONFIG_COMPAT=y
          CONFIG_TMPFS_XATTR=y
          CONFIG_TMPFS_POSIX_ACL=y
          CONFIG_IP_NF_TARGET_TTL=y
          CONFIG_IP6_NF_TARGET_HL=y
          CONFIG_NET_SCH_FQ=y
          EOF

          # Apply branding and build configuration tweaks
          sed -i 's/check_defconfig//' ./common/build.config.gki
          sed -i '$s|echo "\$res"|echo "\$res-Cabage"|' ./common/scripts/setlocalversion
          sed -i 's/-dirty//' ./common/scripts/setlocalversion
          sed -i '/echo "LTO $LTO "/i export LTO=thin' ./oplus/build/oplus_setup.sh
          sed -i 's/export REPACK_IMG=true/export REPACK_IMG=false/g' ./oplus/build/oplus_setup.sh

      - name: Build Kernel
        working-directory: ${{ env.KERNEL_SRC_DIR }}/kernel_platform
        run: |
          mkdir -p out
          export PATH="/usr/lib/ccache:$PATH"
          ccache -z
          
          ./build_with_bazel.py \
            -t pineapple gki \
            --jobs="$(nproc --all)" --verbose_failures --config=stamp \
            --user_kmi_symbol_lists=//msm-kernel:android/abi_gki_aarch64_qcom \
            --ignore_missing_projects -o "$(pwd)/out"
            
          ccache -s

      - name: Package Kernel and Prepare Release Info
        id: package
        working-directory: ${{ env.BUILD_DIR }}
        run: |
          cd AnyKernel3
          cp ../kernel_platform/oneplus12_v/kernel_platform/out/dist/Image .

          SHORT_SHA=$(git rev-parse --short HEAD)
          TAG_NAME="build-$(date +'%Y%m%d')-${SHORT_SHA}"
          ZIP_NAME="Cabage-OP12-SUSFS-${TAG_NAME}.zip"

          # The zip will be created in the parent directory, which is BUILD_DIR
          zip -r "../${ZIP_NAME}" ./*

          echo "zip_name=${ZIP_NAME}" >> $GITHUB_OUTPUT
          echo "tag_name=${TAG_NAME}" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ env.BUILD_DIR }}/${{ steps.package.outputs.zip_name }}
          tag_name: ${{ steps.package.outputs.tag_name }}
          name: "KernelSU-Next CI Build ${{ steps.package.outputs.tag_name }}"
          body: |
            **Device:** ${{ env.ROOT_DIR_PREFIX }}
            **Branch:** ${{ env.BRANCH }}
            **KernelSU Version:** ${{ env.KSUVER }}
            **Commit:** `${{ github.sha }}`
            
            Automated build from GitHub Actions.

      - name: Upload Build Logs on Failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs
          path: |
            ${{ env.KERNEL_SRC_DIR }}/kernel_platform/out/*.log
            ${{ env.KERNEL_SRC_DIR }}/kernel_platform/**/*.rej
          retention-days: 7
