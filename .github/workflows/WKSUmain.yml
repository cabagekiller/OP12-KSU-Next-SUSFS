name: Build and Release Kernel SUSFS 1.5.9 WKSU

on:
  workflow_dispatch:

permissions:
  contents: write    # needed for gh-release
  actions: read

concurrency:
  group: kernel-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  DEBIAN_FRONTEND: noninteractive
  ROOT_DIR_PREFIX: "OP12-A15"
  BRANCH: "android14-6.1"
  
jobs:
  build-release:
    runs-on: ubuntu-latest
    env:
      CCACHE_DIR: ${{ runner.temp }}/.ccache
      CCACHE_MAXSIZE: 15G
      CCACHE_COMPRESS: 1
      BAZEL_USER_ROOT: ${{ runner.temp }}/.bazel
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: System info
        run: |
          set -euxo pipefail
          uname -a || true
          lsb_release -a || true
          df -h

      - name: Free Disk Space & Update APT
        run: |
          set -euxo pipefail
          sudo apt-get update -qq && sudo apt-get install -y -qq curl ca-certificates
          curl -fsSL https://raw.githubusercontent.com/kou/arrow/e49d8ae15583ceff03237571569099a6ad62be32/ci/scripts/util_free_space.sh | bash

      - name: Setup Build Environment
        run: |
          set -euxo pipefail
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            python3-pip python3-dev python3-setuptools \
            curl git zip unzip gcc g++ make ninja-build file bc bison flex \
            libssl-dev libelf-dev wget build-essential rsync ccache cmake \
            libdw-dev zlib1g-dev pkg-config
          ccache --version || true
          echo "max_size = ${CCACHE_MAXSIZE}" > ${CCACHE_DIR}/ccache.conf || true
          echo "compression = ${CCACHE_COMPRESS}" >> ${CCACHE_DIR}/ccache.conf || true

      - name: Cache ccache
        uses: actions/cache@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ${{ runner.os }}-ccache-${{ hashFiles('**/*KernelSU*','**/*.bzl','**/build.config*','**/gki_defconfig') }}
          restore-keys: |
            ${{ runner.os }}-ccache-

      - name: Cache Bazel
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.BAZEL_USER_ROOT }}
            ~/.cache/bazel
          key: ${{ runner.os }}-bazel-${{ hashFiles('**/*.bzl','**/WORKSPACE','**/MODULE.bazel','**/BUILD*','**/build_with_bazel.py') }}
          restore-keys: |
            ${{ runner.os }}-bazel-

      - name: Install Latest Pahole
        run: |
          set -euxo pipefail
          sudo apt-get remove --purge -y dwarves || true
          if [ -n "${PAHOLE_COMMIT}" ]; then
            git clone --recurse-submodules https://git.kernel.org/pub/scm/devel/pahole/pahole.git
            cd pahole
            git checkout "${PAHOLE_COMMIT}"
            cmake -S . -B build -DCMAKE_BUILD_TYPE=Release
            cmake --build build -j"$(nproc)"
            sudo cmake --install build
          else
            git clone --recurse-submodules https://git.kernel.org/pub/scm/devel/pahole/pahole.git
            cd pahole
            cmake -S . -B build -DCMAKE_BUILD_TYPE=Release
            cmake --build build -j"$(nproc)"
            sudo cmake --install build
          fi
          which pahole
          pahole --version

      - name: Setup Python and Repo Tool
        run: |
          set -euxo pipefail
          python3 -m pip install --upgrade pip
          pip3 install gitpython xmltodict
          mkdir -p "$HOME/bin"
          wget -q -O "$HOME/bin/repo" https://storage.googleapis.com/git-repo-downloads/repo
          chmod a+x "$HOME/bin/repo"
          echo "$HOME/bin" >> $GITHUB_PATH
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"

      - name: Configure Build Directory
        id: build_dir
        run: |
          set -euxo pipefail
          ROOT_DIR="${ROOT_DIR_PREFIX}-$(date +'%Y-%m-%d-%H-%M-%S')-release"
          echo "ROOT_DIR=${ROOT_DIR}" >> $GITHUB_ENV
          BUILD_DIR="$GITHUB_WORKSPACE/builds/${ROOT_DIR}"
          echo "BUILD_DIR=${BUILD_DIR}" >> $GITHUB_ENV
          mkdir -p "${BUILD_DIR}"
          echo "Build directory set to ${BUILD_DIR}"

      - name: Clone Required Repositories
        working-directory: ${{ env.BUILD_DIR }}
        run: |
          set -euxo pipefail
          git clone --recursive https://github.com/WildKernels/AnyKernel3.git -b gki-2.0
          git clone https://gitlab.com/simonpunk/susfs4ksu.git -b gki-android14-6.1
          git clone https://github.com/cabagekiller/kernel_patches.git

      - name: Setup Kernel Source
        working-directory: ${{ env.BUILD_DIR }}
        run: |
          set -euxo pipefail
          KERNEL_DIR="kernel_platform/oneplus12_v"
          echo "KERNEL_DIR=${KERNEL_DIR}" >> $GITHUB_ENV
          mkdir -p "${KERNEL_DIR}"
          cd "${KERNEL_DIR}"
          repo init -u https://github.com/OnePlusOSS/kernel_manifest.git -b oneplus/sm8650 -m oneplus12_v.xml --depth=1
          sync_attempts=3
          for i in $(seq 1 $sync_attempts); do
            if repo sync -c -j"$(nproc)" --force-sync --no-clone-bundle --no-tags; then
              break
            fi
            echo "Repo sync failed. Attempt $i of $sync_attempts"
            [ $i -lt $sync_attempts ] && sleep 60
          done
          # If last command failed, exit
          repo sync -c -j1 --force-sync --no-clone-bundle --no-tags || { echo "Repo sync failed after multiple attempts."; exit 1; }
          rm -rf ./kernel_platform/common/android/abi_gki_protected_exports_*

      - name: Setup KernelSU (Submodule Integration) + Set KSU Version
        working-directory: ${{ env.BUILD_DIR }}/${{ env.KERNEL_DIR }}/kernel_platform
        run: |
          set -euxo pipefail
          # Pull KernelSU Next helper
          curl -LSs "https://raw.githubusercontent.com/WildKernels/Wild_KSU/wild/kernel/setup.sh" | bash -s wild
          cd Wild_KSU/kernel

          # Compute KSU version from commit count + base (same logic, but robust)
          BASE_VERSION=10200
          COMMITS=$(/usr/bin/git rev-list --count HEAD)
          KSU_VERSION=$((COMMITS + BASE_VERSION))
          echo "KSUVER=${KSU_VERSION}" | tee -a $GITHUB_ENV

          # Integrate DKSU_VERSION into Makefile robustly:
          # - If DKSU_VERSION=... exists, replace the value.
          # - Else, append a define at EOF so builds pick it up.
          if grep -qE '^[[:space:]]*DKSU_VERSION[[:space:]]*[:+]?=' Makefile; then
            sed -i -E "s/^[[:space:]]*DKSU_VERSION[[:space:]]*[:+]?=.*/DKSU_VERSION:=${KSU_VERSION}/" Makefile
          else
            printf '\n# Injected by CI\nDKSU_VERSION:=%s\n' "${KSU_VERSION}" >> Makefile
          fi

      - name: Setup SUSFS and patches
        working-directory: ${{ env.BUILD_DIR }}/${{ env.KERNEL_DIR }}/kernel_platform
        run: |
          set -euxo pipefail
          SUSFS_PATCHES="../../../susfs4ksu/kernel_patches"
          KERNEL_PATCHES="../../../kernel_patches"
          KSU_NEXT="Wild_KSU"

          mkdir -p ./common/fs ./common/include/linux
          cp "${SUSFS_PATCHES}/fs/"* ./common/fs/
          cp "${SUSFS_PATCHES}/include/linux/"* ./common/include/linux/
          cp "${SUSFS_PATCHES}/KernelSU/10_enable_susfs_for_ksu.patch" "${KSU_NEXT}/"
          cp "${SUSFS_PATCHES}/50_add_susfs_in_gki-android14-6.1.patch" ./common/
          cp "${KERNEL_PATCHES}/69_hide_stuff.patch" ./common/
          cp "${KERNEL_PATCHES}/wild/hooks/scope_min_manual_hooks_v1.4.patch" ./common/

          cp "${KERNEL_PATCHES}/wild/susfs_fix_patches/v1.5.9/fix_rules.c.patch" "${KSU_NEXT}/"
          cp "${KERNEL_PATCHES}/wild/susfs_fix_patches/v1.5.9/fix_core_hook.c.patch" "${KSU_NEXT}/"
          cp "${KERNEL_PATCHES}/wild/susfs_fix_patches/v1.5.9/fix_sucompat.c.patch" "${KSU_NEXT}/"
          cp "${KERNEL_PATCHES}/wild/susfs_fix_patches/v1.5.9/fix_kernel_compat.c.patch" "${KSU_NEXT}/"

          cd "${KSU_NEXT}"
          patch -p1 --forward < 10_enable_susfs_for_ksu.patch || true
          patch -p1 --forward < fix_core_hook.c.patch
          patch -p1 --forward < fix_rules.c.patch
          patch -p1 --forward < fix_sucompat.c.patch
          patch -p1 --forward < fix_kernel_compat.c.patch

          cd ../common
          patch -p1 -F 3 < scope_min_manual_hooks_v1.4.patch
          patch -p1 < 50_add_susfs_in_gki-android14-6.1.patch || echo "SUSFS patch may have been already applied."
          patch -p1 -F 3 < 69_hide_stuff.patch || echo "69_hide_stuff patch may have been already applied."

      - name: Configure Kernel (defconfig edits)
        working-directory: ${{ env.BUILD_DIR }}/${{ env.KERNEL_DIR }}/kernel_platform
        run: |
          set -euxo pipefail
          CFG=./common/arch/arm64/configs/gki_defconfig

          # KSU + SUSFS
          cat << 'EOF' >> "$CFG"
          CONFIG_KSU=y
          CONFIG_KSU_SUSFS=y
          CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y
          CONFIG_KSU_SUSFS_SUS_PATH=y
          CONFIG_KSU_SUSFS_SUS_MOUNT=y
          CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y
          CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y
          CONFIG_KSU_SUSFS_SUS_KSTAT=y
          CONFIG_KSU_SUSFS_SUS_OVERLAYFS=y
          CONFIG_KSU_SUSFS_TRY_UMOUNT=y
          CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y
          CONFIG_KSU_SUSFS_SPOOF_UNAME=y
          CONFIG_KSU_SUSFS_ENABLE_LOG=y
          CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y
          CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y
          CONFIG_KSU_SUSFS_OPEN_REDIRECT=y
          CONFIG_KSU_SUSFS_SUS_SU=n
          CONFIG_KSU_WITH_KPROBES=n
          CONFIG_KSU_KPROBES_HOOK=n
          CONFIG_COMPAT=y
          CONFIG_TMPFS_XATTR=y
          CONFIG_TMPFS_POSIX_ACL=y
          CONFIG_IP_NF_TARGET_TTL=y
          CONFIG_IP6_NF_TARGET_HL=y
          CONFIG_IP6_NF_MATCH_HL=y
          CONFIG_THREAD_INFO_IN_TASK=y
          EOF

          # TCP BBR + fq/fq_codel
          cat << 'EOF' >> "$CFG"
          CONFIG_TCP_CONG_ADVANCED=y
          CONFIG_TCP_CONG_BBR=y
          CONFIG_TCP_CONG_BIC=n
          CONFIG_TCP_CONG_WESTWOOD=n
          CONFIG_TCP_CONG_HTCP=n
          CONFIG_NET_SCH_FQ=y
          CONFIG_NET_SCH_FQ_CODEL=y
          EOF

          # LTO tweaks
          sed -i 's/CONFIG_LTO=n/CONFIG_LTO=y/' "$CFG" || true
          sed -i 's/CONFIG_LTO_CLANG_FULL=y/CONFIG_LTO_CLANG_THIN=y/' "$CFG" || true
          sed -i 's/CONFIG_LTO_CLANG_NONE=y/CONFIG_LTO_CLANG_THIN=y/' "$CFG" || true

          # Remove defconfig check once (idempotent)
          sed -i '2s/check_defconfig//' ./common/build.config.gki || true

          # Branding & -dirty removal across scripts (idempotent)
          sed -i '$s|echo "\$res"|echo "\$res-Cabage"|' ./common/scripts/setlocalversion || true
          sed -i '$s|echo "\$res"|echo "\$res-Cabage"|' ./msm-kernel/scripts/setlocalversion || true
          sed -i '$s|echo "\$res"|echo "\$res-Cabage"|' ./external/dtc/scripts/setlocalversion || true

          sed -i "/stable_scmversion_cmd/s/-maybe-dirty//g" ./build/kernel/kleaf/impl/stamp.bzl || true
          sed -i 's/-dirty//' ./common/scripts/setlocalversion || true
          sed -i 's/-dirty//' ./msm-kernel/scripts/setlocalversion || true
          sed -i 's/-dirty//' ./external/dtc/scripts/setlocalversion || true
          sed -i 's/-dirty//' ./build/kernel/kleaf/workspace_status_stamp.py || true

          # Vendor script tweaks
          sed -i '/echo "LTO $LTO "/i export LTO=thin' ./oplus/build/oplus_setup.sh || true
          sed -i 's/export REPACK_IMG=true/export REPACK_IMG=false/g' ./oplus/build/oplus_setup.sh || true

      - name: Build Kernel
        working-directory: ${{ env.BUILD_DIR }}/${{ env.KERNEL_DIR }}/kernel_platform
        env:
          PATH: /usr/lib/ccache:${{ env.PATH }}
          CCACHE_DIR: ${{ env.CCACHE_DIR }}
          BAZEL_USER_ROOT: ${{ env.BAZEL_USER_ROOT }}
        run: |
          set -euxo pipefail
          mkdir -p out
          start_time=$(date +%s)
          ccache -z || true

          ./build_with_bazel.py \
            -t pineapple gki \
            --jobs="$(nproc --all)" --verbose_failures --config=stamp \
            --user_kmi_symbol_lists=//msm-kernel:android/abi_gki_aarch64_qcom \
            --ignore_missing_projects -o "$(pwd)/out"

          ccache -s || true
          end_time=$(date +%s)
          echo "Kernel build time: $((end_time - start_time)) seconds"
          ls -lah out/dist || (echo "No dist output!" && exit 1)

      - name: Create ZIP Package
        working-directory: ${{ env.BUILD_DIR }}
        run: |
          set -euxo pipefail
          DIST_DIR="${{ env.BUILD_DIR }}/${{ env.KERNEL_DIR }}/kernel_platform/out/dist"
          AK3_DIR="${{ env.BUILD_DIR }}/AnyKernel3"

          # Ensure AnyKernel3 exists (use the one we cloned)
          [ -d "${AK3_DIR}" ] || { echo "AnyKernel3 not found"; exit 1; }

          # Pick Image or Image.gz; convert gz to Image if needed for AK3
          if [ -f "${DIST_DIR}/Image" ]; then
            cp "${DIST_DIR}/Image" "${AK3_DIR}/Image"
          elif [ -f "${DIST_DIR}/Image.gz" ]; then
            gunzip -c "${DIST_DIR}/Image.gz" > "${AK3_DIR}/Image"
          else
            echo "No Image or Image.gz found in ${DIST_DIR}"
            ls -lah "${DIST_DIR}" || true
            exit 1
          fi

          # Optionally include dtbo / vendor_boot overlays if your AK3 needs them:
          [ -f "${DIST_DIR}/dtbo.img" ] && cp "${DIST_DIR}/dtbo.img" "${AK3_DIR}/" || true

          cd "${AK3_DIR}"
          ZIP_NAME="Cabage-OP12-SUSFS-${{ env.ROOT_DIR_PREFIX }}-KSU${{ env.KSUVER }}-$(date +'%Y-%m-%d-%H-%M-%S').zip"
          echo "zip_name=${ZIP_NAME}" >> $GITHUB_ENV
          echo "Creating zip file $ZIP_NAME..."
          zip -r "../$ZIP_NAME" ./*
          ls -lh "../$ZIP_NAME"

      - name: Set current timestamp
        id: timestamp
        run: echo "CURRENT_TIMESTAMP=$(date -u +'%Y.%m.%d-%H%M%S')" >> $GITHUB_ENV

      - name: Upload artifact (flashable ZIP)
        uses: actions/upload-artifact@v4
        with:
          name: kernel-zip
          path: ${{ env.BUILD_DIR }}/${{ env.zip_name }}
          compression-level: 0
          retention-days: 7

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: ${{ env.BUILD_DIR }}/${{ env.zip_name }}
          tag_name: release-${{ env.CURRENT_TIMESTAMP }}
          name: Release ${{ env.ROOT_DIR_PREFIX }} ${{ env.zip_name }}
          body: |
            Release for ${{ env.ROOT_DIR_PREFIX }} based on branch ${{ env.BRANCH }}
            KSU Version: ${{ env.KSUVER }}
            Timestamp (UTC): ${{ env.CURRENT_TIMESTAMP }}

      - name: Upload Build Logs (on failure)
        if: ${{ failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: build-logs
          path: |
            ${{ env.BUILD_DIR }}/kernel_platform/oneplus12_v/kernel_platform/out/*.log
            ${{ env.BUILD_DIR }}/kernel_platform/oneplus12_v/kernel_platform/**/*.rej
          retention-days: 5
          if-no-files-found: warn
